INPUT:

#include <stdio.h>
#define n 5 
 int completedPhilosophers = 0, i;
 struct fork
 {
  int taken;
}
 ForkAvail[n];
 struct philosp
{
  int left;
  int right;
}
 Philostatus[n];
 void goForDinner(int philID)
{
  if (Philostatus[philID].left == 10 && Philostatus[philID].right == 10)
    printf("Philosopher %d completed his dinner\n", philID + 1);
else if (Philostatus[philID].left == 1 && Philostatus[philID].right == 1)
  {
    printf("Philosopher %d completed his dinner\n", philID + 1);
 
    Philostatus[philID].left = Philostatus[philID].right = 10; 
    int otherFork = philID - 1;
 
    if (otherFork == -1)
      otherFork = (n - 1);
 
    ForkAvail[philID].taken = ForkAvail[otherFork].taken = 0; //releasing forks
    printf("Philosopher %d released fork %d and fork %d\n", philID + 1, philID + 1, otherFork + 1);
    completedPhilosophers++;
  }
  else if (Philostatus[philID].left == 1 && Philostatus[philID].right == 0)
  {
  if (philID == (n - 1))
    {
      if (ForkAvail[philID].taken == 0)
      {
      ForkAvail[philID].taken = Philostatus[philID].right = 1;
        printf("Fork %d taken by philosopher %d\n", philID + 1, philID + 1);
      }
      else
      {
        printf("Philosopher %d is waiting for fork %d\n", philID + 1, philID + 1);
      }
    }
    else
    {
     int dupphilID = philID;
      philID -= 1;
 
      if (philID == -1)
        philID = (n - 1);
 
      if (ForkAvail[philID].taken == 0)
      {
        ForkAvail[philID].taken = Philostatus[dupphilID].right = 1;
        printf("Fork %d taken by Philosopher %d\n", philID + 1, dupphilID + 1);
      }
      else
      {
        printf("Philosopher %d is waiting for Fork %d\n", dupphilID + 1, philID + 1);
      }
    }
  }
  else if (Philostatus[philID].left == 0)
  {
    if (philID == (n - 1))
    {
      if (ForkAvail[philID - 1].taken == 0)
      {
      ForkAvail[philID - 1].taken = Philostatus[philID].left = 1;
        printf("Fork %d taken by philosopher %d\n", philID, philID + 1);
      }
      else
      {
        printf("Philosopher %d is waiting for fork %d\n", philID + 1, philID);
      }
    }
    else
    {
     //except last philosopher case
      if (ForkAvail[philID].taken == 0)
      {
        ForkAvail[philID].taken = Philostatus[philID].left = 1;
        printf("Fork %d taken by Philosopher %d\n", philID + 1, philID + 1);
      }
      else
      {
        printf("Philosopher %d is waiting for Fork %d\n", philID + 1, philID + 1);
      }
    }
  }
  else {}
}
 
int main()
{
  for (i = 0; i < n; i++)
    ForkAvail[i].taken = Philostatus[i].left = Philostatus[i].right = 0;
 
  while (completedPhilosophers < n)
  {
   for (i = 0; i < n; i++)
      goForDinner(i);
    printf("\nTill now number of philosophers who completed dinner are: %d", completedPhilosophers);
  }
 
  return 0;
}

OUTPUT:

Philosopher 2 completed his dinner
Philosopher 3 completed his dinner
Philosopher 3 released fork 3 and fork 2
Fork 3 taken by Philosopher 4
Philosopher 5 is waiting for fork 4

Till now number of philosophers who completed dinner are: 3Philosopher 1 completed his dinner
Philosopher 2 completed his dinner
Philosopher 3 completed his dinner
Philosopher 4 completed his dinner
Philosopher 4 released fork 4 and fork 3
Fork 4 taken by philosopher 5

Till now number of philosophers who completed dinner are: 4Philosopher 1 completed his dinner
Philosopher 2 completed his dinner
Philosopher 3 completed his dinner
Philosopher 4 completed his dinner
Fork 5 taken by philosopher 5

Till now number of philosophers who completed dinner are: 4Philosopher 1 completed his dinner
Philosopher 2 completed his dinner
Philosopher 3 completed his dinner
Philosopher 4 completed his dinner
Philosopher 5 completed his dinner
Philosopher 5 released fork 5 and fork 4

Till now number of philosophers who completed dinner are: 5
--------------------------------
Process exited after 0.6262 seconds with return value 0
Press any key to continue . . .
